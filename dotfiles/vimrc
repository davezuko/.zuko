" vim: foldmethod=marker

" Documentation -------------------------------------------- {{{
" Reference:
" - http://statico.github.io/vim.html
" - http://www.oliversherouse.com/2017/08/21/vim_zero.html
" - https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux
" - https://statico.github.io/vim3.html
"}}}

" Plugins -------------------------------------------------- {{{
" Install plugin manager if it does not exist.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')

" Core ----------------------------------------------------- {{{
Plug '/usr/local/opt/fzf'            " Import native FZF binary (brew install fzf)
Plug 'junegunn/fzf.vim'              " FuzzyFind integration
Plug 'vim-airline/vim-airline'       " Prettier statusline
Plug 'tpope/vim-commentary'          " Easy commenting
Plug 'tpope/vim-repeat'              " Make `.` work better
Plug 'tpope/vim-surround'            " Easy surround commands
Plug 'tpope/vim-unimpaired'          " More symmetrical mappings
Plug 'tpope/vim-fugitive'            " Sweet Git integration
Plug 'tpope/vim-rhubarb'             " Extensions for fugitive
Plug 'airblade/vim-gitgutter'        " Sidebar Git integration
Plug 'editorconfig/editorconfig-vim' " Use .editorconfig settings when found
Plug 'francoiscabrol/ranger.vim'     " Awesome file navigator
Plug 'w0rp/ale'                      " Asynchronous linter
Plug 'mhinz/vim-startify'            " Improved startup screen
Plug 'mbbill/undotree'               " Undo tree visualizer
Plug 'sheerun/vim-polyglot'          " Language support
Plug 'luochen1990/rainbow'           " Rainbow parentheses
"}}}

" NeoVim --------------------------------------------------- {{{
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'rbgrouleff/bclose.vim'       " Ranger dependency for neovim
endif
"}}}

" Themes --------------------------------------------------- {{{
Plug 'vim-airline/vim-airline-themes'
Plug 'chriskempson/base16-vim'
Plug 'lifepillar/vim-solarized8'
Plug 'liuchengxu/space-vim-dark'
"}}}

call plug#end()
filetype plugin indent on
"}}}

" Main Settings -------------------------------------------- {{{
set ttimeoutlen=50                   " Reduce input delay when entering normal mode
set undofile                         " Remember undo history between sessions
set undodir=~/.vim/undo              " Where to store the undo history
set noswapfile                       " Don't create swap files
set hidden                           " Allow unsaved buffers
set autoread                         " Automatically reload files changes outside of vim
set expandtab                        " Convert tabs to spaces
set tabstop=2                        " Number of spaces for a tab
set softtabstop=2                    " Replace tabs with this number of spaces
set shiftwidth=2                     " Use this number of spaces for shift motions (e.g. indent, dedent)
set backspace=indent,eol,start       " Allow backspacing over the following regions (for backwards compat)
set number                           " Show line numbers
set ruler                            " Show current column and line number
set cursorline                       " Highlight the current line
set showcmd                          " Show when leader key has been pressed
set wrap                             " Enable visual line wrapping...
set textwidth=0                      " ...only when text reaches the end of the window
set wrapmargin=0                     " Number of characters from the window edge to start wrapping
set ignorecase                       " Ignore case when searching...
set smartcase                        " ...except when search term starts with a capital
set hlsearch                         " Highlight active search
set incsearch                        " Show search/replace in real time
set modeline                         " Enable modeline
set laststatus=2                     " Always show the status line
set diffopt+=vertical                " Split diffs vertically (left/right pane)
set wildignore+=*.jpg,*.jpeg,*.png,*.svg
let g:deoplete#enable_at_startup=1
let g:jsx_ext_required=0

if has('clipboard')
  set clipboard=unnamedplus          " Always copy to system clipboard with yank/delete
endif
if exists('+colorcolumn')
  set colorcolumn=80                 " Show line length guide
endif
if exists('&inccommand')
  set inccommand=nosplit             " Show substitutions in place
endif
if has('nvim')
  set completeopt-=preview
endif

" Prevent grep from automatically opening the first matching file, and replace
" grep with ripgrep for speed.
ca grep grep!
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m
endif
"}}}

" Auto Commands -------------------------------------------- {{{
" Remove trailing whitespace on save
augroup autoTrimWhitespace
  autocmd!
  autocmd BufWritePre * %s/\s\+$//e
augroup END

" Automatically open the quickfix list when it is populated.
augroup autoOpenQuickFixList
  autocmd!
  autocmd QuickFixCmdPost [^l]* cwindow
  autocmd QuickFixCmdPost l*    lwindow
augroup END

" Language Support
augroup autoCheckFileType
  autocmd!
  autocmd BufNewFile,BufRead *.tsx set filetype=typescript.jsx
augroup END
"}}}

" Theming -------------------------------------------------- {{{
" Do not clobber existing syntax highlighting if `syntax enable` is called
" multiple times (i.e. when the .vimrc is re-sourced).
if !exists('g:syntax_on')
  syntax enable
endif
if has("termguicolors")
  set termguicolors
endif

set background=dark
colorscheme space-vim-dark
hi Comment cterm=italic

" Airline
let g:airline_theme='bubblegum'
let g:airline_powerline_fonts=!has("gui_macvim")
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#ale#enabled=1

" Git Gutter
let g:gitgutter_sign_added='●'
let g:gitgutter_sign_modified='●'
let g:gitgutter_sign_removed='●'

" Rainbow Parentheses
let g:rainbow_active=1
let rainbow_colors_light=['#06e5ff', '#e806ff', '#06ff72', '#ffa406']
let rainbow_colors_dark=['DarkBlue', 'Magenta', 'Black', 'Red', 'DarkGray', 'DarkGreen', 'DarkYellow']
let g:rainbow_conf={
\	'guifgs': (&background == 'light' ? rainbow_colors_dark : rainbow_colors_light),
\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\}

" Fix vim-jsx not coloring closing tags. Seriously?
" https://github.com/mxw/vim-jsx/issues/124
hi Tag        ctermfg=04
hi xmlTag     ctermfg=04
hi xmlTagName ctermfg=04
hi xmlEndTag  ctermfg=04
hi xmlTagName guifg=#59ACE5
hi xmlTag     guifg=#59ACE5
hi xmlEndTag  guifg=#2974a1
"}}}

" Keybindings ---------------------------------------------- {{{
" Space(macs) as my leader. Keep \ as the leader and map space to that key.
" Prefer this method over mapping space directly as the leader so that there
" is a visual indicator when a command is being entered.
let g:mapleader='\'
nnoremap <Space> <Nop>
vnoremap <Space> <Nop>
nmap <Space> <Leader>
vmap <Space> <Leader>

" Move vertically through visual lines, not logical lines
nnoremap k gk
nnoremap j gj
nnoremap <Up> g<Up>
nnoremap <Down> g<Down>

" Disable Shift-Up/Down in visual mode, which 99% of the time is me
" accidentally jumping up to the top or bottom of the screen.
vnoremap <S-Up> <NOP>
vnoremap <S-Down> <NOP>

" More Efficient File Saving
map <Esc><Esc> :w<CR>

" Center screen during jump movements
nnoremap n nzz
nnoremap } }zz

" Don't insert certain deletions into the default register
nnoremap x "_x

" Clear search highlights on Escape...
nnoremap <esc> :nohlsearch<return><esc>
" ...but mapping Escape causes weird arrow key behavior, so fix that
" https://stackoverflow.com/questions/11940801/mapping-esc-in-vimrc-causes-bizzare-arrow-behaviour
nnoremap <esc>^[ <esc>^[

" Do not automatically jump to next match for current word
nnoremap * *<c-o>

" Easy error navigation
nmap <silent> <C-Left> <Plug>(ale_previous_wrap)
nmap <silent> <C-Right> <Plug>(ale_next_wrap)

" Easy line movement
nnoremap <C-Up> :m .-2<CR>==
nnoremap <C-Down> :m .+1<CR>==

" Enable Tab completion for deoplete
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

" Easy movement between panes
noremap <Leader>w<Left> <C-W><C-H>
noremap <Leader>w<Up> <C-W><C-K>
noremap <Leader>w<Down> <C-W><C-J>
noremap <Leader>w<Right> <C-W><C-L>
"}}}

" Mnemonics ------------------------------------------------ {{{
" [B]uffer
nnoremap <Leader><Tab> :b#<CR>
nnoremap <Leader>bl :ls<CR>
nnoremap <Leader>bn :bn<CR>
nnoremap <Leader>bp :bp<CR>

" [F]ilesystem
nnoremap <Leader>ff :FZF<CR>
nnoremap <Leader>fr :Ranger<CR>
nnoremap <Leader>fw :grep! "<cword>"<CR>

" [G]it
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gb :Gbrowse<CR>

" [Q]uickFix List
nnoremap <Leader>ql :copen<CR>

" [W]indow
noremap <Leader>ws :split<CR>
noremap <Leader>wv :vsplit<CR>
"}}}
